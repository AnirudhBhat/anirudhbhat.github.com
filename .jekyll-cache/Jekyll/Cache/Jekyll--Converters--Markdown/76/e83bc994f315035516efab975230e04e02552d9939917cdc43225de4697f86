I"<p>Yes, conditional statements are considered code smell if they are used extensively all over the project. alrighty,  let us jump straight to the example to understand <strong>why</strong>.</p>

<p>letâ€™s assume we are making a network request to different news sources to get the top headlines from each source.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">getHeadlines</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="p">{</span>
      <span class="s">"BBC"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromBBC</span><span class="p">()</span>
      <span class="s">"CNN"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromCNN</span><span class="p">()</span>
      <span class="s">"Guardian"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromGuardian</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The problem with the above code is that it violates both SRP and open for extension and closed for modification principles from SOLID. I would highly suggest reading this if you are not familiar with SOLID principles. Letâ€™s understand the problems one by one.</p>

<ol>
  <li>getHeadlines is clearly handling more than one responsibility, currently, itâ€™s handling 3 responsibilities.</li>
  <li>If we want to add a new source in the future we have to touch this piece of logic which we donâ€™t want to do. We want this method to be future proof so that even if we need to add few more sources in the future we donâ€™t even have to do anything in this method.</li>
</ol>

<p>We can use one of the OOP concept Polymorphism to solve this to make our code cleaner. Letâ€™s see how</p>

<p>interface News {
   fun fetchNews()
}</p>

<p>class BBCNews(): News {
    override fun fetchNews() {
       return fetchNewsFromBBC()
    }
}</p>

<p>class CNNNews(): News {
    override fun fetchNews() {
       return fetchNewsFromCNN()
    }
}</p>

<p>class GuardianNews(): News {
    override fun fetchNews() {
       return fetchNewsFromGuardian()
    }
}</p>

<p>fun getHeadlines(newsSource: News) {
    newsSource.fetchNews()
}</p>

<p>we can call this function as shown below</p>

<p>getHeadlines(BBCNews()) // for BBC news</p>

<p>getHeadlines(CNNNews()) // for CNN news</p>

<p>getHeadlines(GuardianNews()) // for Guardian news</p>

<p>// Got new source?. Just do this</p>

<p>class CNBCNews(): News {
    override fun fetchNews() {
       return fetchNewsFromCNBC()
    }
}</p>

<p>getHeadlines(CNBCNews()) // foe CNBC news</p>

<p>Now getHeadlines method is much cleaner to read and is clearly handling single responsibility. Also, we donâ€™t need to touch on this method if we want to add a new source in the future.</p>

<p>Now the above method is much cleaner and is clearly handling single responsibility. Also, if we want to add one more news source all we have to do is write a function that implements News and override the fetchNews method according to its need. We donâ€™t even have to touch this piece of code for adding future sources. How awesome is that!</p>

<p>so, whenever you see conditional statements which especially operate on types then consider replacing those with OOP concepts and design patterns</p>

:ET