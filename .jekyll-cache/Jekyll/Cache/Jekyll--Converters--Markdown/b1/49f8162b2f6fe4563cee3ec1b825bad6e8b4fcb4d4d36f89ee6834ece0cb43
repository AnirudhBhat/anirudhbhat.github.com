I"J<p>A routine is just a sequence of operations/actions which gets executed one by one in the exact same order as specified.</p>

<p>Co stands for cooperation. A co routine suspend its execution to give other co-routines a chance to execute. So a co-routine is about sharing CPU resources so others can use the same resource.</p>

<p>A coroutine is an instance of suspendable computation. coroutine is not bound to any particular thread. It may suspend its execution in one thread and resume in another one.</p>

<p>Coroutines provide concurrency but not parallelism</p>

<p>async and await are not keywords in Kotlin and are not even part of its standard library.</p>

<p>kotlinx.coroutines is a rich library for coroutines developed by JetBrains. It contains a number of high-level coroutine-enabled primitives that this guide covers, including launch, async and others.</p>

<p>In order to use coroutines, you need to add a dependency on the kotlinx-coroutines-core module</p>

<p><br /></p>

<h2 id="runblocking">RunBlocking</h2>

<p>The name of runBlocking means that the thread that runs it gets blocked for the duration of the call, until all the coroutines inside runBlocking { … } complete their execution.</p>

<p><br /></p>

<h2 id="structured-concurrency">Structured Concurrency</h2>

<p>Coroutines follow a principle of structured concurrency which means that new coroutines can be only launched in a specific CoroutineScope which delimits the lifetime of the coroutine. In a real application, you will be launching a lot of coroutines. Structured concurrency ensures that they are not lost and do not leak. An outer scope cannot complete until all its children coroutines complete. Structured concurrency also ensures that any errors in the code are properly reported and are never lost.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">val</span> <span class="py">time</span> <span class="p">=</span> <span class="nf">measureTimeMillis</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">one</span> <span class="p">=</span> <span class="nf">doSomethingUsefulOne</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">two</span> <span class="p">=</span> <span class="nf">doSomethingUsefulTwo</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"The answer is ${one + two}"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"Completed in $time ms"</span><span class="p">)</span>

</code></pre></div></div>

<p>It produces something like this:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nc">The</span> <span class="n">answer</span> <span class="k">is</span> <span class="mi">42</span>
<span class="nc">Completed</span> <span class="k">in</span> <span class="mi">2017</span> <span class="n">ms</span>

</code></pre></div></div>

<p><br /></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">time</span> <span class="p">=</span> <span class="nf">measureTimeMillis</span> <span class="p">{</span>
        <span class="c1">// we can initiate async actions outside of a coroutine</span>
        <span class="kd">val</span> <span class="py">one</span> <span class="p">=</span> <span class="nf">somethingUsefulOneAsync</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">two</span> <span class="p">=</span> <span class="nf">somethingUsefulTwoAsync</span><span class="p">()</span>
        <span class="c1">// but waiting for a result must involve either suspending or blocking.</span>
        <span class="c1">// here we use `runBlocking { ... }` to block the main thread while waiting for the result</span>
        <span class="nf">runBlocking</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"The answer is ${one.await() + two.await()}"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Completed in $time ms"</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Consider what happens if between the <code class="highlighter-rouge">val one = somethingUsefulOneAsync()</code> line and <code class="highlighter-rouge">one.await()</code> expression there is some logic error in the code, and the program throws an exception, and the operation that was being performed by the program aborts. Normally, a global error-handler could catch this exception, log and report the error for developers, but the program could otherwise continue doing other operations. However, here we have <code class="highlighter-rouge">somethingUsefulTwoAsync</code> still running in the background, even though the operation that initiated it was aborted. This problem does not happen with structured concurrency, as shown in the section below.</p>

<p>Let us take the Concurrent using async example and extract a function that concurrently performs <code class="highlighter-rouge">doSomethingUsefulOne</code> and <code class="highlighter-rouge">doSomethingUsefulTwo</code> and returns the sum of their results. Because the async coroutine builder is defined as an extension on CoroutineScope, we need to have it in the scope and that is what the coroutineScope function provides:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">suspend</span> <span class="k">fun</span> <span class="nf">concurrentSum</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">one</span> <span class="p">=</span> <span class="nf">async</span> <span class="p">{</span> <span class="nf">doSomethingUsefulOne</span><span class="p">()</span> <span class="p">}</span>
    <span class="kd">val</span> <span class="py">two</span> <span class="p">=</span> <span class="nf">async</span> <span class="p">{</span> <span class="nf">doSomethingUsefulTwo</span><span class="p">()</span> <span class="p">}</span>
    <span class="n">one</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span> <span class="p">+</span> <span class="n">two</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This way, if something goes wrong inside the code of the concurrentSum function, and it throws an exception, all the coroutines that were launched in its scope will be cancelled.</p>

<p><br /></p>

<h2 id="scope-builder">Scope Builder</h2>

<p>runBlocking and coroutineScope builders may look similar because they both wait for their body and all its children to complete. The main difference is that the runBlocking method blocks the current thread for waiting, while coroutineScope just suspends, releasing the underlying thread for other usages. Because of that difference, runBlocking is a regular function and coroutineScope is a suspending function.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Sequentially executes doWorld followed by "Done"</span>
<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runBlocking</span> <span class="p">{</span>
    <span class="nf">doWorld</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Done"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Concurrently executes both sections</span>
<span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span> <span class="c1">// this: CoroutineScope</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">2000L</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"World 2"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">1000L</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"World 1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>A coroutineScope in <code class="highlighter-rouge">doWorld</code> completes only after both are complete, so <code class="highlighter-rouge">doWorld</code> returns and allows Done string to be printed only after that.</p>

<p><br /></p>

<h2 id="making-coroutine-wait-through-the-job">Making coroutine wait through the Job</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">job</span> <span class="p">=</span> <span class="nf">launch</span> <span class="p">{</span> <span class="c1">// launch a new coroutine and keep a reference to its Job</span>
    <span class="nf">delay</span><span class="p">(</span><span class="mi">1000L</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"World!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
<span class="n">job</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span> <span class="c1">// wait until child coroutine completes</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"Done"</span><span class="p">)</span> 

</code></pre></div></div>

<p>A launch coroutine builder returns a Job object that is a handle to the launched coroutine and can be used to explicitly wait for its completion. For example, you can wait for completion of the child coroutine and then print “Done” string.</p>

<p><br /></p>

<h2 id="sequential-by-default">Sequential by default</h2>

<p>Assume that we have two suspending functions defined elsewhere that do something useful like some kind of remote service call or computation. We just pretend they are useful, but actually each one just delays for a second for the purpose of this example:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doSomethingUsefulOne</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">{</span>
    <span class="nf">delay</span><span class="p">(</span><span class="mi">1000L</span><span class="p">)</span> <span class="c1">// pretend we are doing something useful here</span>
    <span class="k">return</span> <span class="mi">13</span>
<span class="p">}</span>

<span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doSomethingUsefulTwo</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">{</span>
    <span class="nf">delay</span><span class="p">(</span><span class="mi">1000L</span><span class="p">)</span> <span class="c1">// pretend we are doing something useful here, too</span>
    <span class="k">return</span> <span class="mi">29</span>
<span class="p">}</span>

</code></pre></div></div>

<p>What do we do if we need them to be invoked sequentially — first <code class="highlighter-rouge">doSomethingUsefulOneand</code> <code class="highlighter-rouge">thendoSomethingUsefulTwo</code>, and compute the sum of their results? In practice, we do this if we use the result of the first function to make a decision on whether we need to invoke the second one or to decide on how to invoke it.</p>

<p>We use a normal sequential invocation, <strong>because the code in the coroutine, just like in the regular code, is sequential by default.</strong> The following example demonstrates it by measuring the total time it takes to execute both suspending functions:</p>

<p><strong>Note that concurrency with coroutines is always explicit.</strong></p>

<p><br /></p>

<h2 id="coroutine-context-and-dispatchers">Coroutine context and dispatchers</h2>

<p>Coroutines always execute in some context represented by a value of the <code class="highlighter-rouge">CoroutineContext</code> type, defined in the Kotlin standard library.</p>

<p>The coroutine context is a set of various elements. The main elements are the Job of the coroutine, which we’ve seen before, and its dispatcher.</p>

<p>The coroutine context includes a coroutine dispatcher that determines what thread or threads the corresponding coroutine uses for its execution. The coroutine dispatcher can confine coroutine execution to a specific thread, dispatch it to a thread pool, or let it run unconfined.</p>

<p>All coroutine builders like launch and async accept an optional <code class="highlighter-rouge">CoroutineContext</code> parameter that can be used to explicitly specify the dispatcher for the new coroutine and other context elements.</p>

<p>When launch { … } is used without parameters, it inherits the context (and thus dispatcher) from the CoroutineScope it is being launched from. In this case, it inherits the context of the main runBlocking coroutine which runs in the main thread. That’s why, if you use launch coroutine builder directly from the main thread. The launch coroutine builder will be executing in the main thread as well.</p>

<p><br /></p>

<p><strong>Children of a coroutine</strong></p>

<p>When a coroutine is launched in the CoroutineScope of another coroutine, it inherits its context via <code class="highlighter-rouge">CoroutineScope.coroutineContext</code> and the Job of the new coroutine becomes a child of the parent coroutine’s job. When the parent coroutine is cancelled, all its children are recursively cancelled, too.</p>

<p>However, this parent-child relation can be explicitly overriden in one of two ways:</p>

<ol>
  <li>
    <p>When a different scope is explicitly specified when launching a coroutine (for example, GlobalScope.launch), then it does not inherit a Job from the parent scope.</p>
  </li>
  <li>
    <p>When a different Job object is passed as the context for the new coroutine (as show in the example below), then it overrides the Job of the parent scope.</p>
  </li>
</ol>

<p>In both cases, the launched coroutine is not tied to the scope it was launched from and operates independently.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// launch a coroutine to process some kind of incoming request</span>
<span class="kd">val</span> <span class="py">request</span> <span class="p">=</span> <span class="nf">launch</span> <span class="p">{</span>
    <span class="c1">// it spawns two other jobs</span>
    <span class="nf">launch</span><span class="p">(</span><span class="nc">Job</span><span class="p">())</span> <span class="p">{</span> 
        <span class="nf">println</span><span class="p">(</span><span class="s">"job1: I run in my own Job and execute independently!"</span><span class="p">)</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job1: I am not affected by cancellation of the request"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// and the other inherits the parent context</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job2: I am a child of the request coroutine"</span><span class="p">)</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job2: I will not execute this line if my parent request is cancelled"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
<span class="n">request</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span> <span class="c1">// cancel processing of the request</span>
<span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="c1">// delay a second to see what happens</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"main: Who has survived request cancellation?"</span><span class="p">)</span>

</code></pre></div></div>

<p>The output of this code is:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">job1</span><span class="p">:</span> <span class="nc">I</span> <span class="n">run</span> <span class="k">in</span> <span class="n">my</span> <span class="n">own</span> <span class="nc">Job</span> <span class="n">and</span> <span class="n">execute</span> <span class="n">independently</span><span class="p">!</span>
<span class="n">job2</span><span class="p">:</span> <span class="nc">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">child</span> <span class="n">of</span> <span class="n">the</span> <span class="n">request</span> <span class="n">coroutine</span>
<span class="n">job1</span><span class="p">:</span> <span class="nc">I</span> <span class="n">am</span> <span class="n">not</span> <span class="n">affected</span> <span class="k">by</span> <span class="n">cancellation</span> <span class="n">of</span> <span class="n">the</span> <span class="n">request</span>
<span class="n">main</span><span class="p">:</span> <span class="nc">Who</span> <span class="n">has</span> <span class="n">survived</span> <span class="n">request</span> <span class="n">cancellation</span><span class="p">?</span>
</code></pre></div></div>

:ET