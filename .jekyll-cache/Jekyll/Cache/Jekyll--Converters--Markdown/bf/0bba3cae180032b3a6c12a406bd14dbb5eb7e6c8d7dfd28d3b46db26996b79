I"K<p>Yes, conditional statements are considered code smell if they are used extensively all over the project. alrighty,  let us jump straight to the example to understand <strong>why</strong>.</p>

<p>let’s assume we are making a network request to different news sources to get the top headlines from each source.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">getHeadlines</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="p">{</span>
      <span class="s">"BBC"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromBBC</span><span class="p">()</span>
      <span class="s">"CNN"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromCNN</span><span class="p">()</span>
      <span class="s">"Guardian"</span> <span class="p">-&gt;</span> <span class="nf">fetchNewsFromGuardian</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The problem with the above code is that it violates both <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single-responsibility principle</a> and <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle">Open–closed principle</a> principle. I would highly suggest reading <a href="https://en.wikipedia.org/wiki/SOLID">this</a> if you are not familiar with SOLID principles. Let’s understand the problems one by one.</p>

<h2 id="problems">Problems</h2>

<ol>
  <li>getHeadlines is clearly handling more than one responsibility, currently, it’s handling 3 responsibilities.</li>
  <li>If we want to add a new source in the future we have to touch this piece of logic which we don’t want to do. We want this method to be future proof so that even if we need to add few more sources in the future we don’t even have to do anything in this method.</li>
</ol>

<p><br /></p>

<h2 id="how-can-we-improve-this">How can we improve this</h2>
<p>We can use one of the OOP concept Polymorphism to solve this to make our code cleaner. Let’s see how</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">News</span> <span class="p">{</span>
   <span class="k">fun</span> <span class="nf">fetchNews</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BBCNews</span><span class="p">():</span> <span class="nc">News</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">fetchNews</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">fetchNewsFromBBC</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CNNNews</span><span class="p">():</span> <span class="nc">News</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">fetchNews</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">fetchNewsFromCNN</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">GuardianNews</span><span class="p">():</span> <span class="nc">News</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">fetchNews</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">fetchNewsFromGuardian</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">getHeadlines</span><span class="p">(</span><span class="n">newsSource</span><span class="p">:</span> <span class="nc">News</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">newsSource</span><span class="p">.</span><span class="nf">fetchNews</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>we can call this function as shown below</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">getHeadlines</span><span class="p">(</span><span class="nc">BBCNews</span><span class="p">())</span> <span class="c1">// for BBC news</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">getHeadlines</span><span class="p">(</span><span class="nc">CNNNews</span><span class="p">())</span> <span class="c1">// for CNN news</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">getHeadlines</span><span class="p">(</span><span class="nc">GuardianNews</span><span class="p">())</span> <span class="c1">// for Guardian news</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="what-if-i-want-to-add-new-source">What if i want to add new source?</h2>
<p>Got new source?. Just do this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CNBCNews</span><span class="p">():</span> <span class="nc">News</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">fetchNews</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">fetchNewsFromCNBC</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">getHeadlines</span><span class="p">(</span><span class="nc">CNBCNews</span><span class="p">())</span> <span class="c1">// foe CNBC news</span>
</code></pre></div></div>

<p>Now getHeadlines method is much cleaner to read and is clearly handling single responsibility. Also, we don’t need to touch on this method if we want to add a new source in the future.</p>

<p>Now the above method is much cleaner and is clearly handling single responsibility. Also, if we want to add one more news source all we have to do is write a function that implements News and override the fetchNews method according to its need. We don’t even have to touch this piece of code for adding future sources. How awesome is that!</p>

<p>so, whenever you see conditional statements which especially operate on types then consider replacing those with OOP concepts and design patterns</p>

:ET