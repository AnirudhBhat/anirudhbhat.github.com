I"@<p>Most of us might have faced the problem of losing the scroll position of the <code class="highlighter-rouge">RecyclerView</code> when your Activity/Fragment is recreated. This usually happens because the Adapter data is loaded asynchronously and data hasnâ€™t loaded by the time RecyclerView needs to layout so it fails to restore the scroll position.</p>

<p>RecyclerView already has a solution to this problem. The LayoutManager supports onRestoreInstanceState method which will help us save scroll positions. Letâ€™s see small code snippet on how to use this</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private var recyclerScrollPosition: Int? = null
private var recyclerView: RecyclerView? = null

override public fun onCreate(savedInstanceState: Bundle?) {
	super.onCreate(savedInstanceState)
	recyclerScrollPosition=savedInstanceState.getParcelable("scrollPosition")
}

override fun onSaveInstanceState(outState: Bundle) {
	super.onSaveInstanceState(outState)
	outState.putParcelable("scrollPosition",recyclerView.layoutManager.onSaveInstanceState())
}
</code></pre></div></div>

<p>Once your async operation is done and reattached to RecyclerView then call this method
recyclerView.layoutManager.onRestoreInstanceState(recyclerScrollPosition)</p>

<p>Even the above solution restores the scroll position of RecyclerView whenever Activity/Fragment gets recreated but it requires a bit of code and also we must make sure to call onRestoreInstanceState at the appropriate position and also should make sure that parcelable state that we pass to the onRestoreInstanceState method is not null.</p>

<p>Starting from 1.2.0-alpha02, We donâ€™t have to write all these codes just to restore the scroll position. RecyclerView offers a new API to let the Adapter block layout restoration until it is ready.</p>

<p>The recyclerview:1.2.0-alpha02 solution allows you to set a state restoration policy via the StateRestorationPolicy enum. This has 3 options.</p>

<ol>
  <li>ALLOW</li>
  <li>PREVENT_WHEN_EMPTY</li>
  <li>PREVENT</li>
</ol>

<p>All we have to do is set the restoration policy on the adapter like this</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 
 adapter.stateRestorationPolicy = PREVENT_WHEN_EMPTY

</code></pre></div></div>

<p>Letâ€™s see what those options mean and how to use them.</p>

<p>ALLOW: This is the default state. It restores the RecyclerView state immediately, in the next layout pass.</p>

<p>Since this restores the state immediately this will not be useful if you have an async operation and you are setting the adapter with the result after you get the response. This will be useful if you donâ€™t have an async operation and are setting the RecyclerView adapter with the result list as soon as you initialize. Below you can see the gif of how it looks when applied to asynchronous vs synchronous operation</p>

<p>PREVENT_WHEN_EMPTY: This one restores the RecyclerView state only when the adapter is not empty (adapter.itemCount &gt; 0)</p>

<p>This one is suitable when you have async operation going on because RecyclerView state will be restored only after you update your adapter with the data. This can also be used when you already have the list and are populating the adapter with the list when you initialize and provides the same result.</p>

<p>In the below gif you can see that I have added a delay to fake the async operation, Once the delay is over I am populating the adapter with the list.</p>

<p>PREVENT:  All state restoration is deferred until you set ALLOW or PREVENT_WHEN_EMPTY.</p>

<p>When you set this restoration policy while you initialize your adapter then after you get the results and update the adapter, the scroll position will not be restored unless you set either ALLOW or PREVENT_WHEN_EMPTY while updating your adapter with the result list.</p>
:ET